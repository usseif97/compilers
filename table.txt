ASSIGNMENT.$ --> synch
ASSIGNMENT.float --> synch
ASSIGNMENT.id --> 'id' '=' EXPRESSION ';'
ASSIGNMENT.if --> synch
ASSIGNMENT.int --> synch
ASSIGNMENT.while --> synch
ASSIGNMENT.} --> synch
DECLARATION.$ --> synch
DECLARATION.float --> PRIMITIVE_TYPE 'id' ';'
DECLARATION.id --> synch
DECLARATION.if --> synch
DECLARATION.int --> PRIMITIVE_TYPE 'id' ';'
DECLARATION.while --> synch
DECLARATION.} --> synch
EXPRESSION.( --> SIMPLE_EXPRESSION EXPRESSIONSIMPLE_EXPRESSION
EXPRESSION.) --> synch
EXPRESSION.+ --> SIMPLE_EXPRESSION EXPRESSIONSIMPLE_EXPRESSION
EXPRESSION.- --> SIMPLE_EXPRESSION EXPRESSIONSIMPLE_EXPRESSION
EXPRESSION.; --> synch
EXPRESSION.id --> SIMPLE_EXPRESSION EXPRESSIONSIMPLE_EXPRESSION
EXPRESSION.num --> SIMPLE_EXPRESSION EXPRESSIONSIMPLE_EXPRESSION
EXPRESSIONSIMPLE_EXPRESSION.) --> \L
EXPRESSIONSIMPLE_EXPRESSION.; --> \L
EXPRESSIONSIMPLE_EXPRESSION.relop --> 'relop' SIMPLE_EXPRESSION
FACTOR.( --> '(' EXPRESSION ')'
FACTOR.) --> synch
FACTOR.; --> synch
FACTOR.addop --> synch
FACTOR.id --> 'id'
FACTOR.mulop --> synch
FACTOR.num --> 'num'
FACTOR.relop --> synch
IF.$ --> synch
IF.float --> synch
IF.id --> synch
IF.if --> 'if' '(' EXPRESSION ')' '{' STATEMENT '}' 'else' '{' STATEMENT '}'
IF.int --> synch
IF.while --> synch
IF.} --> synch
METHOD_BODY.$ --> synch
METHOD_BODY.float --> STATEMENT_LIST
METHOD_BODY.id --> STATEMENT_LIST
METHOD_BODY.if --> STATEMENT_LIST
METHOD_BODY.int --> STATEMENT_LIST
METHOD_BODY.while --> STATEMENT_LIST
PRIMITIVE_TYPE.float --> 'float'
PRIMITIVE_TYPE.id --> synch
PRIMITIVE_TYPE.int --> 'int'
SIGN.( --> synch
SIGN.+ --> '+'
SIGN.- --> '-'
SIGN.id --> synch
SIGN.num --> synch
SIMPLE_EXPRESSION.( --> TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION.) --> synch
SIMPLE_EXPRESSION.+ --> SIGN TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION.- --> SIGN TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION.; --> synch
SIMPLE_EXPRESSION.id --> TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION.num --> TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION.relop --> synch
SIMPLE_EXPRESSION1.) --> \L
SIMPLE_EXPRESSION1.; --> \L
SIMPLE_EXPRESSION1.addop --> 'addop' TERM SIMPLE_EXPRESSION1
SIMPLE_EXPRESSION1.relop --> \L
STATEMENT.$ --> synch
STATEMENT.float --> DECLARATION
STATEMENT.id --> ASSIGNMENT
STATEMENT.if --> IF
STATEMENT.int --> DECLARATION
STATEMENT.while --> WHILE
STATEMENT.} --> synch
STATEMENT_LIST.$ --> synch
STATEMENT_LIST.float --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST.id --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST.if --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST.int --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST.while --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST1.$ --> \L
STATEMENT_LIST1.float --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST1.id --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST1.if --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST1.int --> STATEMENT STATEMENT_LIST1
STATEMENT_LIST1.while --> STATEMENT STATEMENT_LIST1
TERM.( --> FACTOR TERM1
TERM.) --> synch
TERM.; --> synch
TERM.addop --> synch
TERM.id --> FACTOR TERM1
TERM.num --> FACTOR TERM1
TERM.relop --> synch
TERM1.) --> \L
TERM1.; --> \L
TERM1.addop --> \L
TERM1.mulop --> 'mulop' FACTOR TERM1
TERM1.relop --> \L
WHILE.$ --> synch
WHILE.float --> synch
WHILE.id --> synch
WHILE.if --> synch
WHILE.int --> synch
WHILE.while --> 'while' '(' EXPRESSION ')' '{' STATEMENT '}'
WHILE.} --> synch
